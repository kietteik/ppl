grammar bnf;

@lexer::header {
from lexererr import *
}

@lexer::members {
def emit(self):
    tk = self.type
    result = super().emit()
    if tk == self.UNCLOSE_STRING:
        raise UncloseString(result.text)
    elif tk == self.ILLEGAL_ESCAPE:
        raise IllegalEscape(result.text)
    elif tk == self.ERROR_CHAR:
        raise ErrorToken(result.text)
    elif tk == self.UNTERMINATED_COMMENT:
        raise UnterminatedComment()
    else:
        return result;
}

options{
	language=Python3;
}
program: declaration program EOF| declaration | /* epsilon */;

declaration: variable_declaration | function_declaration;

variable_declaration: data_type id_list SM;
function_declaration: data_type ID parameter_declaration function_body;
function_body: LB fn_stmt_list RB;
fn_stmt: variable_declaration | statement;
fn_stmt_list: fn_stmt fn_stmt_list | fn_stmt | /* epsilon */;
parameter_declaration: LP parameter_list RP;
variable_parameter: data_type id_list;
id_list: ID CM id_list | ID;
parameter_list: variable_parameter SM parameter_list | variable_parameter | /* epsilon */;


expression: exp1 ADD expression | exp1;
exp1: exp2 SUB exp2 | exp2;
exp2: exp2 (MUL | DIV) exp3 | exp3;
exp3: LP expression RP | operands;

operands: INTLIT | FLOATLIT | ID | call_function; 

statement: assignment | call_statement | return_statement;
in_parameters: expression CM in_parameters | expression | /* epsilon */;
call_function: ID LP in_parameters RP;
call_statement: call_function SM;
assignment: ID EQ expression SM;
return_statement: RETURN expression SM;

data_type: INT | FLOAT;

INT: 'int';
FLOAT: 'float';
RETURN: 'return';
LB: '{';
RB: '}';
SM: ';';
CM: ',';
EQ: '=';
LP: '(';
RP: ')';
ADD: '+';
SUB: '-';
MUL: '*';
DIV: '/';
ID: ('_' | ALPHA) ('_'| ALPHA | DIGIT)*;
INTLIT: [1-9] DIGIT* | '0'+;
FLOATLIT: INT_PART EXP_PART;
WS : [ \t\r\n]+ -> skip ; // skip spaces, tabs, newlines


ERROR_CHAR: .;
UNCLOSE_STRING: .;
ILLEGAL_ESCAPE: .;
UNTERMINATED_COMMENT: .;

fragment ALPHA: [a-zA-Z];
fragment DIGIT: [0-9];
fragment INT_PART: [1-9] DIGIT* | '0'+;
fragment EXP_PART: '.' DIGIT+;